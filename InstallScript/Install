#!/bin/bash

set -e

# Go to the directory where this script is:
cd $(dirname "$(readlink -f "$0")")

# The user building the software is the owner of the
# file ../README.md.
USER="$(stat --printf='%U' ../README.md)"

if [ ! -f config.bash ] ; then
    echo "config.bash was not found."
    echo
    cp default_config.bash config.bash
    echo "Copied default_config.bash to config.bash"
fi

if [ "$(id -u)" != 0 ] ; then
    echo "You must be root (id = 0) to run this"
    exit 1
fi

source config.bash

stages="$(ls -1 stage*.root.bash stage*.user.bash | sort)"


# Usage: fail_stage STAGE_FILE
#
function fail_stage() {
    date > $1.FAILED
    chown $USER $1.FAILED
    set +x
    echo "$1 FAILED"
    exit 1
}

# Usage: mark_stage_done STAGE USER
#
function mark_stage_done() {

    [ -n "$2" ] || exit 1 # script error
    date > $1.done
    [ "$2" != "$USER" ] && chown $USER $1.done
    echo -e "\nRunning $1 as $2 SUCCEEDED\n"
}


set +e
set +x

mark='\n---------------------------------------------------------------\n'

export BASH_ENV=config.bash

for stage in $stages ; do
    if [ ! -f $stage.done ] ; then
        echo -en "${mark}Running: $stage"
        if [[ "$stage" == stage*.root.bash ]]; then
            # Running stage as root
            echo -e " as root${mark}"
            if bash $stage ; then
                mark_stage_done $stage root
            else
                fail_stage $stage
            fi
        else
            # Running stage as regular user
            echo -e " as user $USER${mark}"
            if sudo -u $USER --preserve-env=BASH_ENV bash $stage ; then
                mark_stage_done $stage $USER
            else
                fail_stage $stage
            fi
        fi
    else
        echo -e "\n--- stage $stage is marked as done, skipping it this time\n"
    fi
done

